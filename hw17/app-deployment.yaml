# This section defines the API version and kind of Kubernetes object.
# 'apps/v1' is the stable API version for Deployments.
apiVersion: apps/v1
# 'Deployment' tells Kubernetes to create a Deployment object,
# which is responsible for managing stateless applications.
kind: Deployment
metadata:
  # This is the name of the Deployment object.
  name: library
spec:
  # The selector tells the Deployment which Pods to manage.
  # It matches the labels defined in the Pod template.
  selector:
    matchLabels:
      app: library
  # 'replicas' specifies the desired number of identical Pods to run.
  # Kubernetes will ensure that 3 Pods are always running for this application.
  replicas: 1
  # The 'template' section defines the blueprint for the Pods that will be created.
  template:
    metadata:
      # 'labels' are key/value pairs that are attached to objects.
      # These labels are used by the selector to identify the Pods managed by this Deployment.
      labels:
        app: library
    spec:
      # 'containers' is a list of one or more containers to run within the Pod.
      containers:
        - name: library
          # 'image' specifies the Docker image to use for this container.
          image: library-service:1.0
          ports:
            # 'containerPort' is the port that the application listens on inside the container.
            - containerPort: 8080
          # 'env' defines environment variables that are passed to the container.
          # This is a common way to configure applications running in Kubernetes.
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://library-db:3306/db
            - name: SPRING_DATASOURCE_USERNAME
              value: mysql
            - name: SPRING_DATASOURCE_PASSWORD
              value: mysql
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: com.mysql.cj.jdbc.Driver
---
# This section defines a Service, which exposes the application to the network.
apiVersion: v1
# 'Service' tells Kubernetes to create a Service object.
kind: Service
metadata:
  # This is the name of the Service.
  name: library-service
spec:
  # 'ports' defines the port mapping for the Service.
  ports:
    - protocol: "TCP"
      # 'port' is the port that the Service will be available on within the cluster.
      port: 8080
      # 'targetPort' is the port on the Pod that the Service will forward traffic to.
      # It should match the 'containerPort' of the application.
      targetPort: 8080
  # The 'selector' tells the Service which Pods to send traffic to.
  # It should match the labels of the Pods you want to expose.
  selector:
    app: library
  # 'type: NodePort' exposes the Service on a static port on each of the cluster's nodes.
  # This makes the application accessible from outside the cluster.
  type: NodePort
